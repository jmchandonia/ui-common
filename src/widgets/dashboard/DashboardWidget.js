define(['nunjucks', 'jquery', 'q', 'kbasesession', 'kbaseutils', 'kb.utils.api', 'kbaseuserprofile', 'kbc_Workspace', 'postal', 'json!functional-site/config.json'],
   function (nunjucks, $, Q, Session, Utils, APIUtils,  UserProfile, Workspace, Postal, config) {
      "use strict";
      var DashboardWidget = Object.create({}, {

         // The init function interfaces this object with the caller, and sets up any 
         // constants and constant state.
         DashboardWidget_init: {
            value: function (cfg) {
               this._generatedId = 0;

               // First we get the global config.

               // The global config is derived from the module definition, which gets it from the 
               // functional site main config file directly. The setup property of the config defines
               // the current set of settings (production, development, etc.)
               this.globalConfig = config[config.setup];

               // TODO: implement local config and config merging.
               this.localConfig = {};
               this.initConfig = cfg || {};
               this.setupConfig();

               // PARAMS          
               // The params object is used to hold any parameterized input.
               // Note that params may change. E.g. the user may select another 
               // member profile to view.
               this.params = {};

               // Also the userId is required -- this is the user for whom the social widget is concerning.
               // by convention, if the userId is empty, we use the current logged in user.
               // This allows creating links to social widgets in some contexts in which the username can't be
               // placed onto the url.
               if (Utils.isBlank(cfg.userId)) {
                  if (Session.isLoggedIn()) {
                     this.params.userId = Session.getUsername();
                  }
               } else {
                  this.params.userId = cfg.userId;
               }

               // AUTH
               // Auth information is derived from the auth widget.
               // Auth state can change at any time -- the syncAuth method knows how to 
               // rebuild the widget after auth state change.
               this.setupAuth();


               // Set up widget based on the config, params, and auth.
               this.setupCoreApp();

               this.setup();


               // MESSAGES
               // The widget supports arbitrary messages provided by the widget code to the
               // interface. A simple list.
               this.messages = [];

               // ERROR
               this.error = null;

               // The state object is used to hold any data generated by this 
               // widget.
               // It is merged onto the context object prior to rendering.
               // state is either: none, initialized, changed, 
               this.state = {};
               this.stateMeta = {
                  status: 'none',
                  timestamp: new Date()
               }

               // Creates maps out of lists.
               this.createListMaps();

               // Set up the templating system.
               // NB the templating requires a dedicated widget resources directory in 
               //   /src/widgets/WIDGETNAME/templates
               this.templates = {};
               var loaders = [
                 new nunjucks.WebLoader('/src/widgets/dashboard/' + this.widgetName + '/templates', true),
                 new nunjucks.WebLoader('/src/widgets/dashboard/DashboardWidget/templates', true)
               ];
               this.templates.env = new nunjucks.Environment(loaders, {
                  'autoescape': false
               });
               this.templates.env.addFilter('roleLabel', function (role) {
                  if (this.listMaps['userRoles'][role]) {
                     return this.listMaps['userRoles'][role].label;
                  } else {
                     return role;
                  }
               }.bind(this));
               this.templates.env.addFilter('userClassLabel', function (userClass) {
                  if (this.listMaps['userClasses'][userClass]) {
                     return this.listMaps['userClasses'][userClass].label;
                  } else {
                     return userClass;
                  }
               }.bind(this));
               this.templates.env.addFilter('titleLabel', function (title) {
                  if (this.listMaps['userTitles'][title]) {
                     return this.listMaps['userTitles'][title].label;
                  } else {
                     return title;
                  }
               }.bind(this));
                this.templates.env.addFilter('permissionLabel', function (permissionFlag) {
                  if (this.listMaps['permissionFlags'][permissionFlag]) {
                     return this.listMaps['permissionFlags'][permissionFlag].label;
                  } else {
                     return permissionFlag;
                  }
               }.bind(this));
                this.templates.env.addFilter('length2', function (x) {
                  if (x) {
                     if (x instanceof Array) {
                        return x.length;
                     } else if (x instanceof Object) {
                        return Object.keys(x).length;
                     }
                  }
               }.bind(this));
               // create a gravatar-url out of an email address and a 
               // default option.
               this.templates.env.addFilter('gravatar', function (email, size, rating, gdefault) {
                  // TODO: http/https.
                  return UserProfile.makeGravatarURL(email, size, rating, gdefault);
               }.bind(this));
               this.templates.env.addFilter('kbmarkup', function (s) {
                  s = s.replace(/\n/g, '<br>');
                  return s;
               });
               this.templates.env.addFilter('dateFormat', function (dateString) {
                  return Utils.niceElapsedTime(dateString);
               }.bind(this));
                this.templates.env.addFilter('jsDatestring', function (dateString) {
                  return Utils.iso8601ToDate(dateString).toISOString();
               }.bind(this));
               this.templates.env.addFilter('niceRuntime', function (seconds) {
                  if (!seconds) {
                     return ''
                  }
                  var minutes = Math.floor(seconds/60);
                  var seconds = seconds % 60;
                  var hours = Math.floor(minutes/60);
                  var minutes = minutes % 60;
                  var days = Math.floor(hours/24);
                  var hours = hours % 24;
                  
                  return (days?days+'d':'') + (hours?' '+hours+'h':'') + (minutes?' '+minutes+'m':'') + (seconds?' '+seconds+'s':'')
               }.bind(this));
               
               this.templates.env.addGlobal('randomNumber', function (from, to) {
                  return Math.floor(from + Math.random()*(to - from));
               });
               // This is the cache of templates.
               this.templates.cache = {};

               // The context object is what is given to templates.
               this.context = {};
               this.context.env = {
                  widgetTitle: this.widgetTitle,
                  widgetName: this.widgetName,
                  docsite: this.getConfig('docsite')
               };
               // NB this means that when clearing state or params, the object
               // should not be blown away.
               this.context.state = this.state;
               this.context.params = this.params;


               // Set up listeners for any kbase events we are interested in:
               // NB: following tradition, the auth listeners are namespaced for kbase; the events
               // are not actually emitted in the kbase namespace.
               Postal.channel('session').subscribe('login.success', function (data) {
                  this.onLoggedIn(data.session);
               }.bind(this));

               Postal.channel('session').subscribe('logout.success', function () {
                  this.onLoggedout();
               }.bind(this));

               return this;
            }
         },

         setupConfig: {
            value: function () {

               this.configs = [{}, this.initConfig, this.localConfig, this.globalConfig];

               // Check for required and apply defaults.
               if (!this.hasConfig('container')) {
                  throw 'A container is required by this Widget, but was not provided.';
               }

               if (!this.hasConfig('name')) {
                  throw 'Widget name is required';
               }

               if (!this.hasConfig('title')) {
                  throw 'Widget title is required';
               }

            }
         },

         setupCoreApp: {
            value: function () {
               // Should be run after configuration changes.
               // May touch parts of the widget object, so care should be taken
               // to syncronize or just plain rebuild.

               this.container = this.getConfig('container');
               if (typeof this.container === 'string') {
                  this.container = $(this.container);
               }

               // OTHER CONFIG
               // The widget requires a name to use for various purposes.
               this.widgetName = this.getConfig('name');

               this.widgetTitle = this.getConfig('title');


               this.instanceId = this.genId();

               return;
            }
         },

         setupAuth: {
            value: function () {
               Session.refreshSession();
            }
         },

         // LIFECYCLE

         start: {
            value: function () {
               // This creates the initial UI -- loads the css, inserts layout html.
               // For simple widgets this is all the setup needed.
               // For more complex one, parts of the UI may be swapped out.
               this.setupUI();
               this.renderWaitingView();
               this.setInitialState()
                  .then(function () {
                     return this.refresh()
                  }.bind(this))
                  .catch(function (err) {
                     console.log('ERROR');
                     console.log(err);

                     this.setError(err);
                  }.bind(this))
                  .done();
            }
         },

         setup: {
            value: function () {
               // does whatever the widget needs to do to set itself up
               // after config, params, and auth have been configured.

               return this;
            }
         },

         setupUI: {
            value: function () {
               this.loadCSS();
               this.renderLayout();
               return this;
            }
         },

         stop: {
            value: function () {
               // ???
            }
         },

         destroy: {
            value: function () {
               // tear down any events, etc. that are not attached
               // to the local container.
            }
         },

         // CONFIG
         getConfig: {
            value: function (key, defaultValue) {
               for (var i = 0; i < this.configs.length; i++) {
                  if (Utils.getProp(this.configs[i], key) !== undefined) {
                     return Utils.getProp(this.configs[i], key);
                  }
               }
               return defaultValue;
            }
         },

         setConfig: {
            value: function (key, value) {
               // sets it on the first config, which is the override config.
               Utils.setProp(this.configs[0], key, value);
            }
         },

         hasConfig: {
            value: function (key) {
               for (var i = 0; i < this.configs.length; i++) {
                  if (Utils.getProp(this.configs[i], key) !== undefined) {
                     return true;
                  }
               }
               return false;
            }
         },



         // PARAMETERS
         // Parameters are typically passed into the init() method, and represent external values that vary for each 
         // new object. Typical use cases are url query variables.
         setParam: {
            value: function (path, value) {
               Utils.setProp(this.params, path, value);
               this.refresh().done();
            }
         },
         getParam: {
            value: function (path, defaultValue) {
               return Utils.getProp(this.params, path, defaultValue);
            }
         },

         recalcState: {
            value: function () {
               this.setInitialState()
                  .then(function () {
                     return this.refresh();
                  }.bind(this))
                  .catch(function (err) {
                     this.setError(err);
                  }.bind(this))
                  .done();
            }
         },

         refresh: {
            value: function () {
               return Q.Promise(function (resolve, reject, notify) {
                  if (!this.refreshTimer) {
                     this.refreshTimer = window.setTimeout(function () {
                        this.refreshTimer = null;
                        this.render();
                        resolve();
                     }.bind(this), 0);
                  }
               }.bind(this));
            }
         },


         // STATE CHANGES

         /*
           getCurrentState
           This should do prepare the internal state to the point at
           which rendering can occur. It will typically fetch all data and stache it, 
           and perhaps perform some rudimentary analysis.
           */
         setState: {
            value: function (path, value, norefresh) {
               Utils.setProp(this.state, path, value);
               if (!norefresh) {
                  this.refresh().done();
               }
            }
         },

         setError: {
            value: function (errorValue) {
               if (!errorValue) {
                  return;
               }

               var errorText;
               if (typeof errorValue === 'string') {
                  errorText = errorValue;
               } else if (typeof errorValue === 'object') {
                  if (errorValue.message) {
                     errorText = errorValue.message;
                  } else if (errorValue.error && errorValue.error.message) {
                     errorText = errorValue.error.message;
                  } else {
                     errorText = 'Unknown error';
                  }
               }
               this.error = {
                  message: errorText,
                  original: errorValue
               }
               this.refresh().done();
            }
         },

         checkState: {
            value: function (status) {
               if (this.stateMeta.status === status) {
                  return true;
               } else {
                  return false;
               }
            }
         },

         setInitialState: {
            value: function (options) {
               // The base method just resolves immediately (well, on the next turn.) 
               return Q.Promise(function (resolve, reject, notify) {
                  resolve();
               });
            }
         },

         // EVENT HANDLERS

         onLoggedIn: {
            value: function (auth) {
               this.setupAuth();
               this.setup();
               this.setInitialState({
                     force: true
                  })
                  .then(function () {
                     this.refresh();
                  }.bind(this));
            }
         },

         onLoggedOut: {
            value: function () {
               this.setupAuth();
               this.setup();
               this.setInitialState({
                  force: true
               }).then(function () {
                  this.refresh();
               }.bind(this));
            }
         },

         // STATE CALCULATIONS

         // TEMPLATES
         getTemplate: {
            value: function (name) {
               if (this.templates.cache[name] === undefined) {
                  this.templates.cache[name] = this.templates.env.getTemplate(name + '.html');
               }
               return this.templates.cache[name];
            }
         },

         createTemplateContext: {
            value: function (additionalContext) {
               /*
                 var context = this.merge({}, this.context);
                 return this.merge(context, {
                   state: this.state, 
                   params: this.params
                 })
                 */

               // We need to ensure that the context reflects the current auth state.
               this.context.env.generatedId = this.genId();
               this.context.env.loggedIn = Session.isLoggedIn();
               if (Session.isLoggedIn()) {
                  this.context.env.loggedInUser = Session.getUsername();
                  //this.context.env.loggedInUserRealName = Session.getUserRealName();
               } else {
                  delete this.context.env.loggedInUser;
                  //delete this.context.env.loggedInUserRealName;
               }

               this.context.env.instanceId = this.instanceId;

               this.context.env.isOwner = this.isOwner();

               if (additionalContext) {
                  var temp = Utils.merge({}, this.context);
                  return Utils.merge(temp, additionalContext);
               } else {
                  return this.context;
               }
            }
         },

         renderTemplate: {
            value: function (name, context) {
               var template = this.getTemplate(name);
               if (!template) {
                  throw 'Template ' + name + ' not found';
               }
               var context = context ? context : this.createTemplateContext();
               return template.render(context);
            }
         },

         // Generates a unique id for usage on synthesized dom elements.
         genId: {
            value: function () {
               return 'gen_' + this.widgetName + '_' + this._generatedId++;
            }
         },

         renderError: {
            value: function () {
               var context = this.createTemplateContext({
                  error: {
                     message: Utils.getProp(this.error, 'message')
                  }
               });
               this.places.content.html(this.getTemplate('error').render(context));
            }
         },

         renderErrorView: {
            value: function (error) {
               // Very simple error view.

               if (error) {
                  var errorText;
                  if (typeof error === 'string') {
                     errorText = error;
                  } else if (typeof error === 'object') {
                     if (error instanceof Error) {
                        errorText = error.message;
                     } else {
                        error = '' + error;
                     }
                  }
               }

               var context = this.createTemplateContext({
                  error: errorText
               });
               this.places.content.html(this.getTemplate('error').render(context));
            }
         },

         isOwner: {
            value: function (paramName) {
               // NB param name represents the property name of the parameter which currently 
               // holds the username of the "subject" of the widget. If the current authenticated
               // user and the subject user are the same, we say the user is the owner.
               // The widgets use 'userId', which originates in the url as a path component,
               // e.g. /people/myusername.
               paramName = paramName ? paramName : 'userId';
               if (Session.isLoggedIn() && Session.getUsername() === this.params[paramName]) {
                  return true;
               } else {
                  return false;
               }
            }
         },

         // DOM UPDATE

         // An example universal renderer, which inspects the state of the widget and
         // displays the appropriate content.
         render: {
            value: function () {
               // Generate initial view based on the current state of this widget.
               // Head off at the pass -- if not logged in, can't show profile.
               if (this.error) {
                  this.renderError();
               } else if (Session.isLoggedIn()) {
                 this.setTitle(this.widgetTitle);
                  this.places.content.html(this.renderTemplate('authorized'));
               } else {
                  // no profile, no basic aaccount info
                 this.setTitle(this.widgetTitle);
                  this.places.content.html(this.renderTemplate('unauthorized'));
               }
               if (this.afterRender) {
                  this.afterRender();
               }
               return this;
            }
         },

         // These are some very basic renderers for common functions. 

         // This can provide an initial layout, such as a panel, and provide container nodes,
         // such as title and content.
         renderLayout: {
            value: function () {
               this.container.html(this.getTemplate('layout').render(this.createTemplateContext()));
               this.places = {
                  title: this.container.find('[data-placeholder="title"]'),
                  alert: this.container.find('[data-placeholder="alert"]'),
                  content: this.container.find('[data-placeholder="content"]')
               };
            }
         },

         // Render a waiting icon while.
         // This is typically done before getCurrentState which might be doing a time consuming ajax call
         // to fetch data.
         // NB depends on assets.
         renderWaitingView: {
            value: function () {
               this.places.content.html('<img src="assets/img/ajax-loader.gif"></img>');
            }
         },
         
         setTitle: {
           value: function (title) {
             this.places.title.html(this.widgetTitle);             
           }
         },
         
         clearButtons: {
           value: function (title) {
             
           }
         },
         
         addButton: {
           value: function (cfg) {
             
           }
         },

         loadCSS: {
            value: function () {
               // Load social widget css.
               $('<link>')
                  .appendTo('head')
                  .attr({
                     type: 'text/css',
                     rel: 'stylesheet'
                  })
                  .attr('href', '/src/widgets/dashboard/style.css');
               // Load specific widget css.
               $('<link>')
                  .appendTo('head')
                  .attr({
                     type: 'text/css',
                     rel: 'stylesheet'
                  })
                  .attr('href', '/src/widgets/dashboard/' + this.widgetName + '/style.css');
            }
         },

         renderMessages: {
            value: function () {
               if (this.places.alert) {
                  this.places.alert.empty();
                  for (var i = 0; i < this.messages.length; i++) {
                     var message = this.messages[i];
                     var alertClass = 'default';
                     switch (message.type) {
                     case 'success':
                        alertClass = 'success';
                        break;
                     case 'info':
                        alertClass = 'info';
                        break;
                     case 'warning':
                        alertClass = 'warning';
                        break;
                     case 'danger':
                     case 'error':
                        alertClass = 'danger';
                        break;
                     }
                     this.places.alert.append(
                        '<div class="alert alert-dismissible alert-' + alertClass + '" role="alert">' +
                        '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>' +
                        '<strong>' + message.title + '</strong> ' + message.message + '</div>');
                  }
               }
            }
         },

         clearMessages: {
            value: function () {
               this.messages = [];
               this.renderMessages();
            }
         },

         addSuccessMessage: {
            value: function (title, message) {
               if (message === undefined) {
                  message = title;
                  title = '';
               }
               this.messages.push({
                  type: 'success',
                  title: title,
                  message: message
               });
               this.renderMessages();
            }
         },

         addWarningMessage: {
            value: function (title, message) {
               if (message === undefined) {
                  message = title;
                  title = '';
               }
               this.messages.push({
                  type: 'warning',
                  title: title,
                  message: message
               });
               this.renderMessages();
            }
         },

         addErrorMessage: {
            value: function (title, message) {
               if (message === undefined) {
                  message = title;
                  title = '';
               }
               this.messages.push({
                  type: 'error',
                  title: title,
                  message: message
               });
               this.renderMessages();
            }
         },


        

         logNotice: {
            value: function (source, message) {
               console.log('NOTICE: [' + source + '] ' + message);
            }
         },

         logDeprecation: {
            value: function (source, message) {
               console.log('DEPRECATION: [' + source + '] ' + message);
            }
         },

         logWarning: {
            value: function (source, message) {
               console.log('WARNING: [' + source + '] ' + message);
            }
         },
         logError: {
            value: function (source, message) {
               console.log('ERROR: [' + source + '] ' + message);
            }
         },

         createListMaps: {
            value: function () {
               this.listMaps = {};
               for (var listId in this.lists) {
                  var list = this.lists[listId];

                  this.listMaps[listId] = {};

                  for (var i in list) {
                     this.listMaps[listId][list[i].id] = list[i];
                  }
               }
            }
         },

         lists: {
            value: {
               permissionFlags: [{
                     id: 'r',
                     label: 'Read',
                     description: 'Read Only'
                  },
                  {
                     id: 'w',
                     label: 'Write',
                     description: 'Read and Write'
                  },
                  {
                     id: 'a',
                     label: 'Admin',
                     description: 'Read, Write, and Share'
                  },
                                 {
                     id: 'n',
                     label: 'None',
                     description: 'No Access'
                  }],
               userRoles: [{
                     id: 'pi',
                     label: 'Principal Investigator'
                  },
                  {
                     id: 'gradstudent',
                     label: 'Graduate Student'
                  },
                  {
                     id: 'developer',
                     label: 'Developer'
                  }, {
                     id: 'tester',
                     label: 'Tester'
                  }, {
                     id: 'documentation',
                     label: 'Documentation'
                  }, {
                     id: 'general',
                     label: 'General Interest'
                  }],
               userClasses: [{
                  id: 'pi',
                  label: 'Principal Investigator'
               }, {
                  id: 'gradstudent',
                  label: 'Graduate Student'
               }, {
                  id: 'kbase-internal',
                  label: 'KBase Staff'
               }, {
                  id: 'kbase-test',
                  label: 'KBase Test/Beta User'
               }, {
                  id: 'commercial',
                  label: 'Commercial User'
               }],
               userTitles: [{
                  id: 'mr',
                  label: 'Mr.'
               }, {
                  id: 'ms',
                  label: 'Ms.'
               }, {
                  id: 'dr',
                  label: 'Dr.'
               }, {
                  id: 'prof',
                  label: 'Prof.'
               }],
               gravatarDefaults: [{
                  id: 'mm',
                  label: 'Mystery Man - simple, cartoon-style silhouetted outline'
               }, {
                  id: 'identicon',
                  label: 'Identicon - a geometric pattern based on an email hash'
               }, {
                  id: 'monsterid',
                  label: 'MonsterID - generated "monster" with different colors, faces, etc'
               }, {
                  id: 'wavatar',
                  label: 'Wavatar - generated faces with differing features and backgrounds'
               }, {
                  id: 'retro',
                  label: 'Retro - 8-bit arcade-style pixelated faces'
               }, {
                  id: 'blank',
                  label: 'Blank - A Blank Space'
               }]


            }
         },
           isValidNarrative: {
            value: function (ws) {
               if (ws.metadata.narrative &&
                  // corrupt workspaces may have narrative set to something other than the object id of the narrative
                  /^\d+$/.test(ws.metadata.narrative) &&
                  ws.metadata.is_temporary !== 'true') {
                  return true;
               } else {
                  return false;
               }
            }
         },

         applyNarrativeFilter: {
            value: function (ws, filter) {
               return true;
            }
         },

         getNarratives: {
            value: function (cfg) {
               // get all the narratives the user can see.
               return Q.promise(function (resolve, reject, notify) {
                  this.promise(this.workspaceClient, 'list_workspace_info', cfg.params)
                     .then(function (data) {
                        var workspaces = [];
                        for (var i = 0; i < data.length; i++) {
                           var wsInfo = APIUtils.workspace_metadata_to_object(data[i]);
                           if (this.isValidNarrative(wsInfo) && this.applyNarrativeFilter(cfg.filter)) {
                              workspaces.push(wsInfo);
                           }
                        }

                        var objectRefs = workspaces.map(function (w) {
                           return {
                              ref: w.id + '/' + w.metadata.narrative
                           }
                        });

                        // Now get the corresponding object metadata for each narrative workspace
                        this.promise(this.workspaceClient, 'get_object_info_new', {
                              objects: objectRefs,
                              ignoreErrors: 1,
                              includeMetadata: 1
                           })
                           .then(function (data) {
                              var narratives = [];
                              for (var i = 0; i < data.length; i++) {
                                 // If one of the object ids from the workspace metadata (.narrative) did not actually
                                 // result in a hit, skip it. This can occur if a narrative is corrupt -- the narrative object
                                 // was deleted or replaced and the workspace metadata not updated.
                                 if (!data[i]) {
                                    console.log('WARNING: workspace ' + narratives[i].workspace.id + ' does not contain a matching narrative object');
                                    continue;
                                 }
                                 // Make sure it is a valid narrative object.
                                 var object = APIUtils.object_info_to_object(data[i]);
                                 if (object.typeName !== 'Narrative') {
                                    console.log('WARNING: workspace ' + object.wsid + ' object ' + object.id + ' is not a valid Narrative object'  );
                                    continue;
                                 }
                                 // console.log(object.typeName);
                                 
                                 //if (data[i][6] === 4427) {
                                 //   console.log('MATT'); console.log(data[i]);
                                 //}
                                 narratives.push({
                                    workspace: workspaces[i],
                                    object: object
                                 });
                              }
                              resolve(narratives);
                           }.bind(this))
                           .catch(function (err) {
                              reject(err);
                           })
                           .done();
                     }.bind(this))
                     .catch(function (err) {
                        reject(err);
                     })
                     .done();
               }.bind(this));
            }
         },
         
          getPermissions: {
            value: function (narratives) {
               return Q.promise(function (resolve, reject, notify) {
                  var promises = narratives.map(function (narrative) {
                     return this.promise(this.workspaceClient, 'get_permissions', {
                        id: narrative.workspace.id
                     })
                  }.bind(this));
                  var username = Session.getUsername();
                  Q.all(promises)
                     .then(function (permissions) {
                        for (var i = 0; i < permissions.length; i++) {
                           var narrative = narratives[i];
                           narrative.permissions = Utils.object_to_array(permissions[i], 'username', 'permission')
                              .filter(function (x) {
                                 if (x.username === username ||
                                    x.username === '*' ||
                                    x.username === narrative.workspace.owner) {
                                    return false;
                                 } else {
                                    return true;
                                 }
                              })
                              .sort(function (a, b) {
                                 if (a.username < b.username) {
                                    return -1;
                                 } else if (a.username > b.username) {
                                    return 1;
                                 } else {
                                    return 0
                                 }
                              });
                        }
                        resolve(narratives);
                     }.bind(this))
                     .catch(function (err) {
                        reject(err);
                     })
                     .done();
               }.bind(this));
            }
         }

      });

      return DashboardWidget;
   });